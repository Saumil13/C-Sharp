Rotated array
- sorted array can be rotated into binary tree.



Find the pivot of the array - Pivot means - small element in the array.

if array[0] <= array[lenght - 1] ==> not rotated
1)set mid = (start + end)/2
2)Check if mid + 1 is pivot then break; array[mid+1] < array[mid] 
3) if array[start] <= array[mid] set start = mid +1
4) else end = mid - 1

https://www.youtube.com/watch?v=6pSzsJH56BA

Apply binary search in the array
1) set mid = (start + end)/2
2) check if array[mid] == num then return mid
3) if num < array[mid], set end = mid - 1
4) else start = mid + 1

Else return -1

Program:

class Solution {
    public int search(int[] nums, int target) {
        
    if (nums.length == 0) {
        return -1;
    }

    int l = 0, r = nums.length - 1;

    int pivot = findPivotIndex(nums);

    if (pivot != -1) {
        if (nums[l] <= target && target <= nums[pivot]) {
            r = pivot;
        } else {
            l = pivot + 1;
        }
    }

    while (l <= r) {
        int m = l + (r - l)/2;

        if (nums[m] == target) {
            return m;
        } else if (nums[m] < target) {
            l = m + 1;
        } else {
            r = m - 1;
        }
    }

    return -1;
}

private int findPivotIndex(int[] nums) {
    int l = 0, r = nums.length - 1;

    if (nums[0] <= nums[r]) {
        return -1;
    }

    int pivot = -1;

    while (l <= r) {
        int m = l + (r - l)/2;

        if (nums[m] > nums[nums.length - 1]) {
            pivot = m;
            l = m + 1;
        } else {
            r = m - 1;
        }
    }

    return pivot;

}
}

